package ints

// Int16 is a type that represents an 16-bit signed integer.
// It is an alias for the built-in int16 type.
type Int16 int16

// Add returns the sum a+b.
//
// This function's execution time does not depend on the inputs.
func (a Int16) Add(b Int16) Int16 {
	return a + b
}

// Sub returns the difference a-b.
//
// This function's execution time does not depend on the inputs.
func (a Int16) Sub(b Int16) Int16 {
	return a - b
}

// Neg returns the negation of a.
//
// This function's execution time does not depend on the inputs.
func (a Int16) Neg() Int16 {
	return -a
}

// Text returns the string representation of a in the given base.
// Base must be between 2 and 62, inclusive.
// The result uses the lower-case letters 'a' to 'z' for digit values 10 to 35,
// and the upper-case letters 'A' to 'Z' for digit values 36 to 61. No prefix (such as "0x") is added to the string.
func (a Int16) Text(base int) string {
	return formatInt(int64(a), base)
}

// Append appends the string representation of a, as generated by a.Text(base), to buf and returns the extended buffer.
func (a Int16) Append(dst []byte, base int) []byte {
	return appendInt(dst, int64(a), base)
}

// AppendText implements the [encoding.TextAppender] interface.
func (a Int16) AppendText(dst []byte) ([]byte, error) {
	return appendInt(dst, int64(a), 10), nil
}

// String returns the string representation of a in base 10.
func (a Int16) String() string {
	return formatInt(int64(a), 10)
}
