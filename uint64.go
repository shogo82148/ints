package ints

import "cmp"

// Uint64 is a type that represents an 64-bit unsigned integer.
// It is an alias for the built-in uint64 type.
type Uint64 uint64

// Add returns the sum a+b.
//
// This function's execution time does not depend on the inputs.
func (a Uint64) Add(b Uint64) Uint64 {
	return a + b
}

// Sub returns the difference a-b.
//
// This function's execution time does not depend on the inputs.
func (a Uint64) Sub(b Uint64) Uint64 {
	return a - b
}

// Mul returns the product a*b.
func (a Uint64) Mul(b Uint64) Uint64 {
	return a * b
}

// Sign returns the sign of a.
// It returns 1 if a > 0, and 0 if a == 0.
// It does not return -1 because Uint64 is unsigned.
func (a Uint64) Sign() int {
	if a == 0 {
		return 0
	}
	return 1
}

// Lsh returns the logical left shift a<<i.
//
// This function's execution time does not depend on the inputs.
func (a Uint64) Lsh(i uint) Uint64 {
	return a << i
}

// Rsh returns the logical right shift a>>i.
//
// This function's execution time does not depend on the inputs.
func (a Uint64) Rsh(i uint) Uint64 {
	return a >> i
}

// Neg returns the negation of a.
//
// This function's execution time does not depend on the inputs.
func (a Uint64) Neg() Uint64 {
	return -a
}

// Cmp returns the comparison result of a and b.
// It returns -1 if a < b, 0 if a == b, and 1 if a > b.
func (a Uint64) Cmp(b Uint64) int {
	return cmp.Compare(a, b)
}

// Text returns the string representation of a in the given base.
// Base must be between 2 and 62, inclusive.
// The result uses the lower-case letters 'a' to 'z' for digit values 10 to 35,
// and the upper-case letters 'A' to 'Z' for digit values 36 to 61. No prefix (such as "0x") is added to the string.
func (a Uint64) Text(base int) string {
	return formatUint(uint64(a), base)
}

// Append appends the string representation of a, as generated by a.Text(base), to buf and returns the extended buffer.
func (a Uint64) Append(dst []byte, base int) []byte {
	return appendUint(dst, uint64(a), base)
}

// AppendText implements the [encoding.TextAppender] interface.
func (a Uint64) AppendText(dst []byte) ([]byte, error) {
	return appendUint(dst, uint64(a), 10), nil
}

// String returns the string representation of a in base 10.
func (a Uint64) String() string {
	return formatUint(uint64(a), 10)
}
