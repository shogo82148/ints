package ints

import "math/bits"

// Int128 is a type that represents an 128-bit signed integer.
type Int128 [2]uint64

// Add returns the sum a+b.
//
// This function's execution time does not depend on the inputs.
func (a Int128) Add(b Int128) Int128 {
	u1, carry := bits.Add64(a[1], b[1], 0)
	u0, _ := bits.Add64(a[0], b[0], carry)
	return Int128{u0, u1}
}

// Sub returns the difference a-b.
//
// This function's execution time does not depend on the inputs.
func (a Int128) Sub(b Int128) Int128 {
	u1, borrow := bits.Sub64(a[1], b[1], 0)
	u0, _ := bits.Sub64(a[0], b[0], borrow)
	return Int128{u0, u1}
}

// Sign returns the sign of a.
// It returns 1 if a > 0, -1 if a < 0, and 0 if a == 0.
func (a Int128) Sign() int {
	var zero Int128
	switch {
	case a == zero:
		return 0
	case int64(a[0]) < 0:
		return -1
	default:
		return 1
	}
}

// Neg returns the negation of a.
//
// This function's execution time does not depend on the inputs.
func (a Int128) Neg() Int128 {
	u1, borrow := bits.Sub64(0, a[1], 0)
	u0, _ := bits.Sub64(0, a[0], borrow)
	return Int128{u0, u1}
}

// Text returns the string representation of a in the given base.
// Base must be between 2 and 62, inclusive.
// The result uses the lower-case letters 'a' to 'z' for digit values 10 to 35,
// and the upper-case letters 'A' to 'Z' for digit values 36 to 61. No prefix (such as "0x") is added to the string.
func (a Int128) Text(base int) string {
	_, s := formatBits128(nil, a[0], a[1], base, int64(a[0]) < 0, false)
	return s
}

// Append appends the string representation of a, as generated by a.Text(base), to buf and returns the extended buffer.
func (a Int128) Append(dst []byte, base int) []byte {
	d, _ := formatBits128(dst, a[0], a[1], base, int64(a[0]) < 0, true)
	return d
}

// AppendText implements the [encoding.TextAppender] interface.
func (a Int128) AppendText(dst []byte) ([]byte, error) {
	d, _ := formatBits128(dst, a[0], a[1], 10, int64(a[0]) < 0, true)
	return d, nil
}

// String returns the string representation of a in base 10.
func (a Int128) String() string {
	_, s := formatBits128(nil, a[0], a[1], 10, int64(a[0]) < 0, false)
	return s
}
