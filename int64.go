package ints

import (
	"cmp"
	"fmt"
)

// Int64 is a type that represents an 64-bit signed integer.
// It is an alias for the built-in int64 type.
type Int64 int64

// Add returns the sum a+b.
//
// This function's execution time does not depend on the inputs.
func (a Int64) Add(b Int64) Int64 {
	return a + b
}

// Sub returns the difference a-b.
//
// This function's execution time does not depend on the inputs.
func (a Int64) Sub(b Int64) Int64 {
	return a - b
}

// Mul returns the product a*b.
//
// This function's execution time does not depend on the inputs.
func (a Int64) Mul(b Int64) Int64 {
	return a * b
}

// Div returns the quotient a/b for b != 0.
// If b == 0, a division-by-zero run-time panic occurs.
// Div implements Euclidean division (unlike Go); see [Int64.DivMod] for more details.
func (a Int64) Div(b Int64) Int64 {
	q, _ := a.DivMod(b)
	return q
}

// Mod returns the remainder a%b for b != 0.
// If b == 0, a division-by-zero run-time panic occurs.
// Mod implements Euclidean division (unlike Go); see [Int64.DivMod] for more details.
func (a Int64) Mod(b Int64) Int64 {
	_, r := a.DivMod(b)
	return r
}

// DivMod returns the quotient and remainder of a/b.
// DivMod implements Euclidean division and modulus (unlike Go):
//
//	q = x div y  such that
//	m = x - y*q  with 0 <= m < |y|
//
// (See Raymond T. Boute, “The Euclidean definition of the functions
// div and mod”. ACM Transactions on Programming Languages and
// Systems (TOPLAS), 14(2):127-144, New York, NY, USA, 4/1992.
// ACM press.)
// See [Int64.QuoRem] for T-division and modulus (like Go).
func (a Int64) DivMod(b Int64) (Int64, Int64) {
	q, r := a/b, a%b
	if r < 0 {
		if b > 0 {
			r += b
			q--
		} else {
			r -= b
			q++
		}
	}
	return q, r
}

// Quo returns the quotient a/b for b != 0.
// If b == 0, a division-by-zero run-time panic occurs.
// Quo implements T-division (like Go); see [Int64.QuoRem] for more details.
func (a Int64) Quo(b Int64) Int64 {
	return a / b
}

// Rem returns the remainder a%b for b != 0.
// If b == 0, a division-by-zero run-time panic occurs.
// Rem implements T-division (like Go); see [Int64.QuoRem] for more details.
func (a Int64) Rem(b Int64) Int64 {
	return a % b
}

// QuoRem returns the quotient and remainder of a/b.
// QuoRem implements T-division and modulus (like Go):
//
//	q = x/y      with the result truncated to zero
//	r = x - y*q
//
// (See Daan Leijen, “Division and Modulus for Computer Scientists”.)
// See [Int64.DivMod] for Euclidean division and modulus (unlike Go).
func (a Int64) QuoRem(b Int64) (Int64, Int64) {
	return a / b, a % b
}

// Lsh returns the logical left shift a<<i.
//
// This function's execution time does not depend on the inputs.
func (a Int64) Lsh(i uint) Int64 {
	return a << i
}

// Rsh returns the arithmetic right shift a>>i, preserving the sign bit.
//
// This function's execution time does not depend on the inputs.
func (a Int64) Rsh(i uint) Int64 {
	return a >> i
}

// Sign returns the sign of a.
// It returns 1 if a > 0, -1 if a < 0, and 0 if a == 0.
func (a Int64) Sign() int {
	switch {
	case a > 0:
		return 1
	case a < 0:
		return -1
	default:
		return 0
	}
}

// Neg returns the negation of a.
//
// This function's execution time does not depend on the inputs.
func (a Int64) Neg() Int64 {
	return -a
}

// Cmp returns the comparison result of a and b.
// It returns -1 if a < b, 0 if a == b, and 1 if a > b.
func (a Int64) Cmp(b Int64) int {
	return cmp.Compare(a, b)
}

// Text returns the string representation of a in the given base.
// Base must be between 2 and 62, inclusive.
// The result uses the lower-case letters 'a' to 'z' for digit values 10 to 35,
// and the upper-case letters 'A' to 'Z' for digit values 36 to 61. No prefix (such as "0x") is added to the string.
func (a Int64) Text(base int) string {
	return formatInt(int64(a), base)
}

// Append appends the string representation of a, as generated by a.Text(base), to buf and returns the extended buffer.
func (a Int64) Append(dst []byte, base int) []byte {
	return appendInt(dst, int64(a), base)
}

// AppendText implements the [encoding.TextAppender] interface.
func (a Int64) AppendText(dst []byte) ([]byte, error) {
	return appendInt(dst, int64(a), 10), nil
}

// String returns the string representation of a in base 10.
func (a Int64) String() string {
	return formatInt(int64(a), 10)
}

// Format implements [fmt.Formatter].
func (a Int64) Format(s fmt.State, verb rune) {
	sign := a.Sign()
	b := Uint64(a)
	if sign < 0 {
		b = b.Neg()
	}
	format(s, verb, sign, b)
}
