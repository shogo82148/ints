package ints

import (
	"cmp"
	"fmt"
)

// Int32 is a type that represents an 32-bit signed integer.
// It is an alias for the built-in int32 type.
type Int32 int32

// IsZero returns true if a is zero.
func (a Int32) IsZero() bool {
	return a == 0
}

// Add returns the sum a+b.
//
// This function's execution time does not depend on the inputs.
func (a Int32) Add(b Int32) Int32 {
	return a + b
}

// Sub returns the difference a-b.
//
// This function's execution time does not depend on the inputs.
func (a Int32) Sub(b Int32) Int32 {
	return a - b
}

// Mul returns the product a*b.
//
// This function's execution time does not depend on the inputs.
func (a Int32) Mul(b Int32) Int32 {
	return a * b
}

// And returns the bitwise AND of a and b.
func (a Int32) And(b Int32) Int32 {
	return a & b
}

// AndNot returns the bitwise AND NOT of a and b.
func (a Int32) AndNot(b Int32) Int32 {
	return a &^ b
}

// Or returns the bitwise OR of a and b.
func (a Int32) Or(b Int32) Int32 {
	return a | b
}

// Xor returns the bitwise XOR of a and b.
func (a Int32) Xor(b Int32) Int32 {
	return a ^ b
}

// Not returns the bitwise NOT of a.
func (a Int32) Not() Int32 {
	return ^a
}

// Lsh returns the logical left shift a<<i.
//
// This function's execution time does not depend on the inputs.
func (a Int32) Lsh(i uint) Int32 {
	return a << i
}

// Rsh returns the arithmetic right shift a>>i, preserving the sign bit.
//
// This function's execution time does not depend on the inputs.
func (a Int32) Rsh(i uint) Int32 {
	return a >> i
}

// Sign returns the sign of a.
// It returns 1 if a > 0, -1 if a < 0, and 0 if a == 0.
func (a Int32) Sign() int {
	switch {
	case a > 0:
		return 1
	case a < 0:
		return -1
	default:
		return 0
	}
}

// Neg returns the negation of a.
//
// This function's execution time does not depend on the inputs.
func (a Int32) Neg() Int32 {
	return -a
}

// Cmp returns the comparison result of a and b.
// It returns -1 if a < b, 0 if a == b, and 1 if a > b.
func (a Int32) Cmp(b Int32) int {
	return cmp.Compare(a, b)
}

// Text returns the string representation of a in the given base.
// Base must be between 2 and 62, inclusive.
// The result uses the lower-case letters 'a' to 'z' for digit values 10 to 35,
// and the upper-case letters 'A' to 'Z' for digit values 36 to 61. No prefix (such as "0x") is added to the string.
func (a Int32) Text(base int) string {
	return formatInt(int64(a), base)
}

// Append appends the string representation of a, as generated by a.Text(base), to buf and returns the extended buffer.
func (a Int32) Append(dst []byte, base int) []byte {
	return appendInt(dst, int64(a), base)
}

// AppendText implements the [encoding.TextAppender] interface.
func (a Int32) AppendText(dst []byte) ([]byte, error) {
	return appendInt(dst, int64(a), 10), nil
}

// String returns the string representation of a in base 10.
func (a Int32) String() string {
	return formatInt(int64(a), 10)
}

// Format implements [fmt.Formatter].
func (a Int32) Format(s fmt.State, verb rune) {
	sign := a.Sign()
	b := Uint32(a)
	if sign < 0 {
		b = b.Neg()
	}
	format(s, verb, sign, b)
}
