package ints

import (
	"cmp"
	"fmt"
	"math/bits"
)

// Uint128 is a type that represents an 128-bit unsigned integer.
type Uint128 [2]uint64

// Add returns the sum a+b.
//
// This function's execution time does not depend on the inputs.
func (a Uint128) Add(b Uint128) Uint128 {
	u1, carry := bits.Add64(a[1], b[1], 0)
	u0, _ := bits.Add64(a[0], b[0], carry)
	return Uint128{u0, u1}
}

// Sub returns the difference a-b.
//
// This function's execution time does not depend on the inputs.
func (a Uint128) Sub(b Uint128) Uint128 {
	u1, borrow := bits.Sub64(a[1], b[1], 0)
	u0, _ := bits.Sub64(a[0], b[0], borrow)
	return Uint128{u0, u1}
}

// Mul returns the product a*b.
//
// This function's execution time does not depend on the inputs.
func (a Uint128) Mul(b Uint128) Uint128 {
	h, l := bits.Mul64(a[1], b[1])
	_, h1 := bits.Mul64(a[0], b[1])
	_, h2 := bits.Mul64(a[1], b[0])
	return Uint128{h + h1 + h2, l}
}

// Sign returns the sign of a.
// It returns 1 if a > 0, and 0 if a == 0.
// It does not return -1 because Uint128 is unsigned.
func (a Uint128) Sign() int {
	var zero Uint128
	if a == zero {
		return 0
	}
	return 1
}

// Neg returns the negation of a.
//
// This function's execution time does not depend on the inputs.
func (a Uint128) Neg() Uint128 {
	u1, borrow := bits.Sub64(0, a[1], 0)
	u0, _ := bits.Sub64(0, a[0], borrow)
	return Uint128{u0, u1}
}

// Cmp returns the comparison result of a and b.
// It returns -1 if a < b, 0 if a == b, and 1 if a > b.
func (a Uint128) Cmp(b Uint128) int {
	if ret := cmp.Compare(a[0], b[0]); ret != 0 {
		return ret
	}
	return cmp.Compare(a[1], b[1])
}

// Text returns the string representation of a in the given base.
// Base must be between 2 and 62, inclusive.
// The result uses the lower-case letters 'a' to 'z' for digit values 10 to 35,
// and the upper-case letters 'A' to 'Z' for digit values 36 to 61. No prefix (such as "0x") is added to the string.
func (a Uint128) Text(base int) string {
	_, s := formatBits128(nil, a[0], a[1], base, false, false)
	return s
}

// Append appends the string representation of a, as generated by a.Text(base), to buf and returns the extended buffer.
func (a Uint128) Append(dst []byte, base int) []byte {
	d, _ := formatBits128(dst, a[0], a[1], base, false, true)
	return d
}

// AppendText implements the [encoding.TextAppender] interface.
func (a Uint128) AppendText(dst []byte) ([]byte, error) {
	d, _ := formatBits128(dst, a[0], a[1], 10, false, true)
	return d, nil
}

// String returns the string representation of a in base 10.
func (a Uint128) String() string {
	_, s := formatBits128(nil, a[0], a[1], 10, false, false)
	return s
}

// Format implements [fmt.Formatter].
func (a Uint128) Format(s fmt.State, verb rune) {
	format(s, verb, a.Sign(), a)
}
